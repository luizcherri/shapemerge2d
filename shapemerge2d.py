# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_shapemerge2d', [dirname(__file__)])
        except ImportError:
            import _shapemerge2d
            return _shapemerge2d
        if fp is not None:
            try:
                _mod = imp.load_module('_shapemerge2d', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _shapemerge2d = swig_import_helper()
    del swig_import_helper
else:
    import _shapemerge2d
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def sign(*args):
  return _shapemerge2d.sign(*args)
sign = _shapemerge2d.sign
class Line(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Line, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Line, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _shapemerge2d.new_Line(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_v1(self): return _shapemerge2d.Line_get_v1(self)
    def get_v2(self): return _shapemerge2d.Line_get_v2(self)
    def intersect(self, *args): return _shapemerge2d.Line_intersect(self, *args)
    __swig_destroy__ = _shapemerge2d.delete_Line
    __del__ = lambda self : None;
Line_swigregister = _shapemerge2d.Line_swigregister
Line_swigregister(Line)

class IntersectionResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntersectionResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntersectionResult, name)
    __repr__ = _swig_repr
    __swig_setmethods__["a1"] = _shapemerge2d.IntersectionResult_a1_set
    __swig_getmethods__["a1"] = _shapemerge2d.IntersectionResult_a1_get
    if _newclass:a1 = _swig_property(_shapemerge2d.IntersectionResult_a1_get, _shapemerge2d.IntersectionResult_a1_set)
    __swig_setmethods__["a2"] = _shapemerge2d.IntersectionResult_a2_set
    __swig_getmethods__["a2"] = _shapemerge2d.IntersectionResult_a2_get
    if _newclass:a2 = _swig_property(_shapemerge2d.IntersectionResult_a2_get, _shapemerge2d.IntersectionResult_a2_set)
    __swig_setmethods__["b1"] = _shapemerge2d.IntersectionResult_b1_set
    __swig_getmethods__["b1"] = _shapemerge2d.IntersectionResult_b1_get
    if _newclass:b1 = _swig_property(_shapemerge2d.IntersectionResult_b1_get, _shapemerge2d.IntersectionResult_b1_set)
    __swig_setmethods__["b2"] = _shapemerge2d.IntersectionResult_b2_set
    __swig_getmethods__["b2"] = _shapemerge2d.IntersectionResult_b2_get
    if _newclass:b2 = _swig_property(_shapemerge2d.IntersectionResult_b2_get, _shapemerge2d.IntersectionResult_b2_set)
    __swig_setmethods__["o"] = _shapemerge2d.IntersectionResult_o_set
    __swig_getmethods__["o"] = _shapemerge2d.IntersectionResult_o_get
    if _newclass:o = _swig_property(_shapemerge2d.IntersectionResult_o_get, _shapemerge2d.IntersectionResult_o_set)
    def __init__(self): 
        this = _shapemerge2d.new_IntersectionResult()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _shapemerge2d.delete_IntersectionResult
    __del__ = lambda self : None;
IntersectionResult_swigregister = _shapemerge2d.IntersectionResult_swigregister
IntersectionResult_swigregister(IntersectionResult)

class PyNextRes(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PyNextRes, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PyNextRes, name)
    __repr__ = _swig_repr
    __swig_setmethods__["v"] = _shapemerge2d.PyNextRes_v_set
    __swig_getmethods__["v"] = _shapemerge2d.PyNextRes_v_get
    if _newclass:v = _swig_property(_shapemerge2d.PyNextRes_v_get, _shapemerge2d.PyNextRes_v_set)
    __swig_setmethods__["b"] = _shapemerge2d.PyNextRes_b_set
    __swig_getmethods__["b"] = _shapemerge2d.PyNextRes_b_get
    if _newclass:b = _swig_property(_shapemerge2d.PyNextRes_b_get, _shapemerge2d.PyNextRes_b_set)
    def get_vertex(self): return _shapemerge2d.PyNextRes_get_vertex(self)
    def get_bool(self): return _shapemerge2d.PyNextRes_get_bool(self)
    def __init__(self): 
        this = _shapemerge2d.new_PyNextRes()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _shapemerge2d.delete_PyNextRes
    __del__ = lambda self : None;
PyNextRes_swigregister = _shapemerge2d.PyNextRes_swigregister
PyNextRes_swigregister(PyNextRes)

class LinePointGenerator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LinePointGenerator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LinePointGenerator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _shapemerge2d.new_LinePointGenerator(*args)
        try: self.this.append(this)
        except: self.this = this
    def pynext(self): return _shapemerge2d.LinePointGenerator_pynext(self)
    def next(self, *args): return _shapemerge2d.LinePointGenerator_next(self, *args)
    def get_from_parm(self, *args): return _shapemerge2d.LinePointGenerator_get_from_parm(self, *args)
    def intersect(self, *args): return _shapemerge2d.LinePointGenerator_intersect(self, *args)
    __swig_destroy__ = _shapemerge2d.delete_LinePointGenerator
    __del__ = lambda self : None;
LinePointGenerator_swigregister = _shapemerge2d.LinePointGenerator_swigregister
LinePointGenerator_swigregister(LinePointGenerator)



